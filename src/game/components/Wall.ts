import { m4, Vec3, degToRad } from './utils'
import Shape from './Shape'

export default class Wall extends Shape {
    VERTICES = new Float32Array([
        // front    
        -0.5, -0.5, 0.5,
        0.5, 0.5, 0.5,
        -0.5, 0.5, 0.5,
        -0.5, -0.5, 0.5,
        0.5, -0.5, 0.5,
        0.5, 0.5, 0.5,

        // back    
        -0.5, -0.5, -0.5,
        -0.5, 0.5, -0.5,
        0.5, 0.5, -0.5,
        -0.5, -0.5, -0.5,
        0.5, 0.5, -0.5,
        0.5, -0.5, -0.5,

        // left    
        -0.5, -0.5, -0.5,
        -0.5, -0.5, 0.5,
        -0.5, 0.5, 0.5,
        -0.5, -0.5, -0.5,
        -0.5, 0.5, 0.5,
        -0.5, 0.5, -0.5,

        // right    
        0.5, -0.5, -0.5,
        0.5, 0.5, 0.5,
        0.5, -0.5, 0.5,
        0.5, -0.5, -0.5,
        0.5, 0.5, -0.5,
        0.5, 0.5, 0.5,

        // top    
        -0.5, 0.5, -0.5,
        0.5, 0.5, 0.5,
        0.5, 0.5, -0.5,
        -0.5, 0.5, 0.5,
        0.5, 0.5, 0.5,
        -0.5, 0.5, -0.5,

        // bottom    
        0.5, -0.5, -0.5,
        0.5, -0.5, 0.5,
        -0.5, -0.5, -0.5,
        -0.5, -0.5, -0.5,
        0.5, -0.5, 0.5,
        -0.5, -0.5, 0.5,
    ])

    COLORS = new Uint8Array([
        80, 70, 200,
        80, 70, 200,
        80, 70, 200,
        80, 70, 200,
        80, 70, 200,
        80, 70, 200,

        200, 70, 0.520,
        200, 70, 0.520,
        200, 70, 0.520,
        200, 70, 0.520,
        200, 70, 0.520,
        200, 70, 0.520,

        70, 200, 20.50,
        70, 200, 20.50,
        70, 200, 20.50,
        70, 200, 20.50,
        70, 200, 20.50,
        70, 200, 20.50,

        200, 200, 70,
        200, 200, 70,
        200, 200, 70,
        200, 200, 70,
        200, 200, 70,
        200, 200, 70,

        20.50, 0.500, 70,
        20.50, 0.500, 70,
        20.50, 0.500, 70,
        20.50, 0.500, 70,
        20.50, 0.500, 70,
        20.50, 0.500, 70,

        20.50, 0.560, 70,
        20.50, 0.560, 70,
        20.50, 0.560, 70,
        20.50, 0.560, 70,
        20.50, 0.560, 70,
        20.50, 0.560, 70,
    ])

    readonly defaultColors = this.COLORS

    constructor(gl: WebGLRenderingContext) {
        super(gl)
        this.transform.scale = Vec3.identity.multiply(50)
    }

    setColor(wall: number, color: number[]) {
        this.COLORS = new Uint8Array([
            ...this.COLORS.slice(0, 3 * 6 * wall),
            color[0], color[1], color[2],
            color[0], color[1], color[2],
            color[0], color[1], color[2],
            color[0], color[1], color[2],
            color[0], color[1], color[2],
            color[0], color[1], color[2],
            ...this.COLORS.slice(3 * 6 * (wall + 1))])
    }

    resetColor() {
        this.COLORS = this.defaultColors
    }
}